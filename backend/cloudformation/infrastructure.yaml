AWSTemplateFormatVersion: '2010-09-09'
Description: EchoGuard Voice-to-Text Compliance Logger Infrastructure

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, test, prod)
    AllowedValues:
      - dev
      - test
      - prod

Resources:
  # S3 Buckets
  AudioBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub echoguard-audio-${AWS::AccountId}-${Environment}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000

  TranscriptBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub echoguard-transcripts-${AWS::AccountId}-${Environment}

  # DynamoDB Tables
  RecordingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub echoguard-recordings-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: recordingId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: recordingId
          KeyType: RANGE

  ResultsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub echoguard-results-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: recordingId
          AttributeType: S
      KeySchema:
        - AttributeName: recordingId
          KeyType: HASH

  # SNS Topics
  TranscribeTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub echoguard-transcribe-${Environment}

  AnalysisTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub echoguard-analysis-${Environment}

  NotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub echoguard-notifications-${Environment}

  # IAM Role for Lambda Functions
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub echoguard-lambda-role-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess

  # Lambda Functions
  UploadHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub echoguard-upload-handler-${Environment}
      Handler: upload_handler.lambda_handler
      Runtime: python3.11
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Sub echoguard-lambda-code-${Environment}
        S3Key: lambda/upload_handler.zip
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          AUDIO_BUCKET: !Ref AudioBucket
          RECORDINGS_TABLE: !Ref RecordingsTable
          TRANSCRIBE_TOPIC_ARN: !Ref TranscribeTopic

  TranscribeHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub echoguard-transcribe-handler-${Environment}
      Handler: transcribe_handler.lambda_handler
      Runtime: python3.11
      Timeout: 60
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Sub echoguard-lambda-code-${Environment}
        S3Key: lambda/transcribe_handler.zip
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          AUDIO_BUCKET: !Ref AudioBucket
          TRANSCRIPT_BUCKET: !Ref TranscriptBucket
          RECORDINGS_TABLE: !Ref RecordingsTable
          ANALYSIS_TOPIC_ARN: !Ref AnalysisTopic

  TranscribeCompleteHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub echoguard-transcribe-complete-handler-${Environment}
      Handler: transcribe_complete_handler.lambda_handler
      Runtime: python3.11
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Sub echoguard-lambda-code-${Environment}
        S3Key: lambda/transcribe_complete_handler.zip
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TRANSCRIPT_BUCKET: !Ref TranscriptBucket
          RECORDINGS_TABLE: !Ref RecordingsTable
          ANALYSIS_TOPIC_ARN: !Ref AnalysisTopic

  AnalysisHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub echoguard-analysis-handler-${Environment}
      Handler: analysis_handler.lambda_handler
      Runtime: python3.11
      Timeout: 300
      MemorySize: 512
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Sub echoguard-lambda-code-${Environment}
        S3Key: lambda/analysis_handler.zip
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TRANSCRIPT_BUCKET: !Ref TranscriptBucket
          RECORDINGS_TABLE: !Ref RecordingsTable
          RESULTS_TABLE: !Ref ResultsTable
          NOTIFICATION_TOPIC_ARN: !Ref NotificationsTopic
          KIRO_API_ENDPOINT: !Sub '{{resolve:ssm:/echoguard/${Environment}/kiro_api_endpoint}}'
          KIRO_API_KEY: !Sub '{{resolve:ssm:/echoguard/${Environment}/kiro_api_key}}'

  GetRecordingsHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub echoguard-get-recordings-handler-${Environment}
      Handler: get_recordings_handler.lambda_handler
      Runtime: python3.11
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Sub echoguard-lambda-code-${Environment}
        S3Key: lambda/get_recordings_handler.zip
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          RECORDINGS_TABLE: !Ref RecordingsTable
          RESULTS_TABLE: !Ref ResultsTable

  GetRecordingDetailsHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub echoguard-get-recording-details-handler-${Environment}
      Handler: get_recordings_handler.get_recording_details
      Runtime: python3.11
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Sub echoguard-lambda-code-${Environment}
        S3Key: lambda/get_recordings_handler.zip
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          RECORDINGS_TABLE: !Ref RecordingsTable
          RESULTS_TABLE: !Ref ResultsTable

  # SNS Subscriptions
  TranscribeTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref TranscribeTopic
      Protocol: lambda
      Endpoint: !GetAtt TranscribeHandlerFunction.Arn

  AnalysisTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AnalysisTopic
      Protocol: lambda
      Endpoint: !GetAtt AnalysisHandlerFunction.Arn

  # Lambda Permissions for SNS
  TranscribeHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TranscribeHandlerFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref TranscribeTopic

  AnalysisHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AnalysisHandlerFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AnalysisTopic

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub echoguard-api-${Environment}
      Description: EchoGuard API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources
  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: users

  UserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref UsersResource
      PathPart: '{userId}'

  RecordingsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref UserIdResource
      PathPart: recordings

  RecordingIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref RecordingsResource
      PathPart: '{recordingId}'

  UploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref RecordingsResource
      PathPart: upload

  # API Gateway Methods
  GetRecordingsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref RecordingsResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRecordingsHandlerFunction.Arn}/invocations

  GetRecordingDetailsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref RecordingIdResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRecordingDetailsHandlerFunction.Arn}/invocations

  UploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UploadResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadHandlerFunction.Arn}/invocations

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetRecordingsMethod
      - GetRecordingDetailsMethod
      - UploadMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # API Gateway Authorizer
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !Sub '{{resolve:ssm:/echoguard/${Environment}/cognito_user_pool_arn}}'

  # Lambda Permissions for API Gateway
  GetRecordingsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetRecordingsHandlerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${Environment}/GET/users/{userId}/recordings

  GetRecordingDetailsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetRecordingDetailsHandlerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${Environment}/GET/users/{userId}/recordings/{recordingId}

  UploadPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UploadHandlerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${Environment}/POST/users/{userId}/recordings/upload

Outputs:
  ApiUrl:
    Description: URL of the API Gateway
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}

  AudioBucketName:
    Description: Name of the S3 bucket for audio uploads
    Value: !Ref AudioBucket

  TranscriptBucketName:
    Description: Name of the S3 bucket for transcription outputs
    Value: !Ref TranscriptBucket

  RecordingsTableName:
    Description: Name of the DynamoDB table for recordings
    Value: !Ref RecordingsTable

  ResultsTableName:
    Description: Name of the DynamoDB table for analysis results
    Value: !Ref ResultsTable